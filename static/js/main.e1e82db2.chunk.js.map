{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","search","window","location","params","URLSearchParams","offSet","get","rotationDays","now","Date","start","getFullYear","diff","day","Math","floor","nowDate","getDate","currentDate","getMonth","console","log","dayNumberOffset","remainderDays","dayCounterNumber","round","className","href","target","rel","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAyEeA,MAtEf,WAEE,IAAIC,EAASC,OAAOC,SAASF,OACzBG,EAAS,IAAIC,gBAAgBJ,GAE7BK,EAASF,EAAOG,IAAI,WAAa,GACjCC,EAAeJ,EAAOG,IAAI,iBAAmB,GAI7CE,EAAM,IAAIC,KACVC,EAAQ,IAAID,KAAKD,EAAIG,cAAe,EAAG,GACvCC,EAAOJ,EAAME,EAEbG,EAAMC,KAAKC,MAAMH,EADR,OAKTI,EAAUR,EAAIS,UAEdT,EAAIS,UAAY,KAClBD,EAAU,IAAMR,EAAIS,WAGtB,IAAIC,EAAcF,EAAQ,IARb,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAQ1CR,EAAIW,YAAY,IAAKX,EAAIG,cAC/DS,QAAQC,IAAI,gBAAkBR,GAe9B,IAAIS,EAAkBT,EAAMR,EAExBkB,EAAgBD,EAAgBf,EADlBO,KAAKC,MAAMO,EAAgBf,GAEzCiB,EAAmBV,KAAKW,MAAMF,EAAgBhB,GAAgB,EAElE,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAEhB,mCACOF,GAGP,6CACgB,6BACbN,GAEH,uBACEQ,UAAU,WACVC,KAAK,4CACLC,OAAO,SACPC,IAAI,uBAJN,aChDYC,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.e1e82db2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n  // Number of days at the start of year til the first meeting (e.g. Year 2020 - First meeting on the 13th. So 13 days set as offset.);\n  let offSet = params.get('offSet') || 13; // Fallback value.. use query string value as first method of retrieval\n  let rotationDays = params.get('rotationDays') || 14; // Fallback value.. use query string value as first method of retrieval\n\n\n\n  var now = new Date(); // Current Date\n  var start = new Date(now.getFullYear(), 0, 0); // Start date of the current year\n  var diff = now - start; // Difference in milliseconds\n  var oneDay = 1000 * 60 * 60 * 24; // The value of one day in milliseconds\n  var day = Math.floor(diff / oneDay); // The No. Day of the year\n\n  var months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n\n  var nowDate = now.getDate();\n\n  if (now.getDate() < 10) {\n    nowDate = '0' + now.getDate();\n  }\n\n  var currentDate = nowDate+'/'+ months[now.getMonth()]+'/'+ now.getFullYear();\n  console.log('Day of year: ' + day);\n\n\n /*\n Working out which day No. in 14-day rotation.\n The Maths:\n * Subtract the offset from the current no. of days in the year, so that it sets the 14-day counter to start at Day 1\n ** e.g. 52 (current no. of days in the year) - 12 (the offset [i.e. the number of days at the beginning of the year before the first 'Day1'] )\n * Determine number of weeks passed by diving the day number (formula above) by 14 (number of days in rotation) and rounding down.\n * Remove the total number of weeks from the weekspassed to determine the remainderDays\n ** e.g. 2.8571 weeks passed - 2 whole weeks = 0.8571 (this is the remainder value)\n * multiply the remainder with the rotation count and round it off to work out dayCounterNumber\n ** e.g. 0.8571 x 14 dayrotation = 11.99 => 12 rounded off\n */\n\n  var dayNumberOffset = day - offSet;\n  var weeksPassed = Math.floor(dayNumberOffset/rotationDays)\n  var remainderDays = dayNumberOffset/rotationDays - weeksPassed;\n  var dayCounterNumber = Math.round(remainderDays * rotationDays) + 1;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <h1>\n          Day {dayCounterNumber}\n        </h1>\n\n        <h3>\n          Current date: <br/>\n          {currentDate}\n        </h3>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/FrankyFour/day-counter\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}